<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
  <title>Ian&#39;s Archives</title>
  
  
  <link href="http://iaaaannn0.com/atom.xml" rel="self"/>
  
  <link href="http://iaaaannn0.com/"/>
  <updated>2025-01-30T04:37:45.432Z</updated>
  <id>http://iaaaannn0.com/</id>
  
  <author>
    <name>Ian</name>
    
  </author>
  
  <generator uri="https://hexo.io/">Hexo</generator>
  
  <entry>
    <title>A Comprehensive Guide to Managing Python Projects with Poetry</title>
    <link href="http://iaaaannn0.com/2025/01/30/poetry/"/>
    <id>http://iaaaannn0.com/2025/01/30/poetry/</id>
    <published>2025-01-30T04:09:36.000Z</published>
    <updated>2025-01-30T04:37:45.432Z</updated>
    
    <content type="html"><![CDATA[<blockquote><p>Poetry is a powerful dependency management and packaging tool for Python. It provides a seamless workflow for managing dependencies, creating virtual environments, and packaging applications. This guide will walk you through the essential features of Poetry, including how to generate a <code>requirements.txt</code> file for compatibility with <code>pip</code>.</p></blockquote><h2 id="1-Installing-Poetry"><strong>1. Installing Poetry</strong></h2><p>To install Poetry, run the following command:</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">curl -sSL https://install.python-poetry.org | python3 -</span><br></pre></td></tr></table></figure><p>After installation, ensure Poetry is available in your terminal by checking its version:</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">poetry --version</span><br></pre></td></tr></table></figure><p>If the command does not work, add Poetry to your PATH:</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">export PATH=&quot;$HOME/.local/bin:$PATH&quot;</span><br></pre></td></tr></table></figure><h2 id="2-Creating-a-New-Poetry-Project"><strong>2. Creating a New Poetry Project</strong></h2><p>To create a new Python project with Poetry, use:</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">poetry new my_project</span><br></pre></td></tr></table></figure><p>This command sets up a basic Python package structure:</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">my_project/</span><br><span class="line">├── pyproject.toml  # Configuration file for Poetry</span><br><span class="line">├── README.rst</span><br><span class="line">├── my_project/     # Project source code</span><br><span class="line">│   └── __init__.py</span><br><span class="line">└── tests/          # Test files</span><br></pre></td></tr></table></figure><p>If you already have a project and want to initialize Poetry within it, navigate to the project directory and run:</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">poetry init</span><br></pre></td></tr></table></figure><p>This will guide you through setting up <code>pyproject.toml</code> interactively.</p><h2 id="3-Managing-Dependencies"><strong>3. Managing Dependencies</strong></h2><h3 id="Adding-Dependencies"><strong>Adding Dependencies</strong></h3><p>To install a package and automatically update <code>pyproject.toml</code> and <code>poetry.lock</code>, use:</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">poetry add requests</span><br></pre></td></tr></table></figure><p>For a development-only dependency:</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">poetry add --dev pytest</span><br></pre></td></tr></table></figure><h3 id="Removing-Dependencies"><strong>Removing Dependencies</strong></h3><p>To remove a package:</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">poetry remove requests</span><br></pre></td></tr></table></figure><h3 id="Updating-Dependencies"><strong>Updating Dependencies</strong></h3><p>To update all dependencies:</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">poetry update</span><br></pre></td></tr></table></figure><p>To update a specific package:</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">poetry update requests</span><br></pre></td></tr></table></figure><h2 id="4-Virtual-Environments-and-Running-Code"><strong>4. Virtual Environments and Running Code</strong></h2><p>Poetry automatically manages a virtual environment for your project. You can activate it with:</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">poetry shell</span><br></pre></td></tr></table></figure><p>To run a Python script within the virtual environment without activating the shell:</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">poetry run python script.py</span><br></pre></td></tr></table></figure><p>To check the virtual environment being used:</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">poetry env info</span><br></pre></td></tr></table></figure><h2 id="5-Exporting-Requirements-for-pip"><strong>5. Exporting Requirements for pip</strong></h2><p>Poetry does not use <code>requirements.txt</code> natively, but you can export dependencies for environments that require it (e.g., Docker, CI/CD pipelines).</p><h3 id="6-Install-the-Poetry-Export-Plugin">6. <strong>Install the Poetry Export Plugin</strong></h3><p>Poetry 2.0+ requires an additional plugin to export dependencies:</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">poetry self add poetry-plugin-export</span><br></pre></td></tr></table></figure><h3 id="7-Generate-requirements-txt">7. <strong>Generate</strong> <code>requirements.txt</code></h3><p>Run the following command to export dependencies:</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">poetry export -f requirements.txt --output requirements.txt --without-hashes</span><br></pre></td></tr></table></figure><p>If you need to include development dependencies:</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">poetry export -f requirements.txt --output requirements.txt --without-hashes --with dev</span><br></pre></td></tr></table></figure><p>You can then install these dependencies using pip:</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">pip install -r requirements.txt</span><br></pre></td></tr></table></figure><h2 id="8-Version-Management"><strong>8. Version Management</strong></h2><p>To check the current project version:</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">poetry version</span><br></pre></td></tr></table></figure><p>To update the version:</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">poetry version patch  # Increases 1.0.0 -&gt; 1.0.1</span><br><span class="line">poetry version minor  # Increases 1.0.0 -&gt; 1.1.0</span><br><span class="line">poetry version major  # Increases 1.0.0 -&gt; 2.0.0</span><br></pre></td></tr></table></figure><h2 id="9-Publishing-to-PyPI"><strong>9. Publishing to PyPI</strong></h2><p>To publish your package to PyPI, first build it:</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">poetry build</span><br></pre></td></tr></table></figure><p>Then publish it:</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">poetry publish</span><br></pre></td></tr></table></figure><p>To publish to TestPyPI for testing:</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">poetry publish --repository testpypi</span><br></pre></td></tr></table></figure><h2 id="Conclusion"><strong>Conclusion</strong></h2><p>Poetry simplifies dependency management, virtual environments, and packaging for Python projects. By using Poetry, you can ensure a more reliable and consistent development workflow. With the ability to export <code>requirements.txt</code>, Poetry remains compatible with traditional Python workflows while providing a modern alternative to <code>pip</code> and <code>virtualenv</code>.</p><p>Start using Poetry today to streamline your Python project management! 🚀</p>]]></content>
    
    
      
      
    <summary type="html">&lt;blockquote&gt;
&lt;p&gt;Poetry is a powerful dependency management and packaging tool for Python. It provides a seamless workflow for managing depen</summary>
      
    
    
    
    
    <category term="poetry" scheme="http://iaaaannn0.com/tags/poetry/"/>
    
  </entry>
  
</feed>
